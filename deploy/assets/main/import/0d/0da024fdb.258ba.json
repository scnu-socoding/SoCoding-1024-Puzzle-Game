[1,["ecpdLyjvZBwrvm+cedCcQy","46vMziNKBLBqVxmUHU4j0m","9bvaMerUlDyary99mJa6xp","f0BIwQ8D5Ml7nTNQbh1YlS","d6CMxqK8hPyo7DtDSBGunu","e7q6FL+VZEgLJUjVeDLic/","a2MjXRFdtLlYQ5ouAFv/+R","e38zHX8+pL85CVISMrpEkR","29FYIk+N1GYaeWH/q1NxQO","abwstieFJFJakN1HRIe4jy","60SgxJbVZPVpx1yElfuau1","e97GVMl6JHh5Ml5qEDdSGa","d722/pKdNCWaLmZdGakJCb","25UetF8hpMkqdV/TC8/3m0","daBYawuw9PBIcT6zYe/A+A","b4265faDZExIggly2Mc/R4","688MkW6INKB5jAGUuU3HFh","465EvYd/xF+ak9QnLn3Rni","0e33RMscdODa1QpSGPXf84","9bYWenW4pFuavfoxBeKN3F","e4iBKVzolNGLSV4J6Prb7X","dfuIeyjbROeoITTJ7CjXgP","f3+g2KilZC5Y5Pv7ueOV7y","c45finZ91HAKb2bNjjE1L8","d8/AdOdCpLjouiSdw4X4hI","ffLKSnhIxGHJhXB5Lm4RZd","63R/eri15Ir5hyu3/UL3w3","280bP1D5ZNbrfl78CT1z5C","c52FwqZ8hFcKZTJfscEls3","08mjQ7bmlDwLUrnqcRAXN7","039E3agBBAa7O0vy4Z2/Pk","b7xHYUomZGXrrYV7+JUh01","fe7f9T5W9I550++n/gqGVo","a3HizLHYNKIqwQciD57d0v","e1q8hA+I9HJLLzKWylG0G4","93OL/tRlJDdLiV67L6F5CD","7bhzv4gBtIbIaO/LTyNhxC","acXKFT0qpFAaLWZuHZf4M+","c5D9ejEZdCzo82+qR9mQ1N","2e5zSm4fBMgrkpqt/cQj51","6dUUoAEjdO143TdqcawIRo","008NgIkchC85nArwxhTOD8","b9YhOir79H6J8hxlLnA+Nf","1ax2wlkX1J34u5gaF4b1U7","77zOr13ZJO6LLcxMO+A92G","04v3gCdhJNu4AJtxV003Da","33O2ZLiUZIAoIFBR3+eVvb","e3DBsW4n5AhJWtSNmTF9iy","ee0N3KrwdNkp/o0QRFc3oa","36A63TzqlJR6EBI2OEnh5O","0fiUt1WatNoryoYPhT/9zm","59FQ7YrvBNML401+nGOtv8","71VhFCTINJM6/Ky3oX9nBT","bdzu/XQNJPj7ec80rASqfH","5d7Or616BOtJpY8/X8ET7F","fbLoHB6/5CMYb9DvEeppvK","54bDrgDRZJv6HyeJI+lRWa","beYjfLtA1FYLEoUcUrMcMC","b6p8TC7o1A+I3CCuIv54xu","8eIOaQDYNJbKc/zqZ0ZpFs","5cZXO6Wq5NboNs651xWM3K","83fc3GDgFBnqFLoSn/Z56+","36NZw8iPZJS5SUOKhYJfv7","81pe95rBlGyaqeqWgu5D8l","9bEJAXv9JBBIfbmA07rEMv","45x6A+/lJBr7ZquLfUjUlE","16P/nwDOdKTqirp8uUkudv","d7LRWHWxBCQ7SWkmTYDGEC","d8HsitJHxOYqo801xBk8ev","02delMVqdBD70a/HSD99FK","3ay1zQVw1CPrTGZwvboA3z","37+juSyGND046AMUBmHTRM","a5hJI5OtNB0Yq0rp/qEfl/","a17y/JnFdBio9pa+2aeg5/","cdN2N6HthIYoPjPnhaIIfI","6aPBoFpctBpKNXOnAFEEyX","07B4Cs399LiY7gCcRZnP5e","69G6iYAM1P7rjpqoQen1ql","b0NWoaipdMNoyLCK8o0zD+","22hvj/hzlNX6EK4VjrygLi","efnRXqkQZHjrF0kThg/Smu","e4197EL7RK6YpYjge0Qi5c","cc+MQuue1MKa2Fm01u1ktk","0ebB/3zh1PDbVti7E4g9/V","b2bVhTmvxHf5CgRE0u0Lw2","6b3C+m4CVOqqNYg2MwoSf7","6ewsKZEM1O54Dt+QpyE596","8dyP8WuO9CNqHbo1YHZbqs","5d3ZQlIyBK76N4heB0pgTB","3cnjXQdqpFT4gLM+ewLYfn","56fc2Ai/RFNYpaMT8crweK","b4P/PCArtIdIH38t6mlw8Y","97d4JcE1VPwpl6BB48Sufi","e8Ueib+qJEhL6mXAHdnwbi","51tJYvWx5PEZI+wAywsCdT","ebie0vs+1FF4i5KRH01Lgx"],["node","_spriteFrame","root","_textureSetter","data","_N$file","_N$target","divWidget","_parent","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","label","_effectAsset","_mesh","texture","_N$handle","_scrollView","splashNode","panelNode","target","cocosNode","main","scene","cardTitle","cardPrefab","panelPrefab","file","mengAudio","imageNode","layout1","panelDiv","scrollView","contentNode","fileCardPrefab","mutiFile","singleFile","layout","model","light","midi","slider","_normalMaterial","sstvAudio"],[["cc.Node",["_name","_objFlags","_opacity","_active","_is3DNode","_id","_components","_contentSize","_parent","_trs","_prefab","_children","_color","_anchorPoint","_eulerAngles"],-3,9,5,1,7,4,2,5,5,5],"cc.SpriteFrame",["cc.Widget",["_alignFlags","_left","_originalWidth","_right","_top","_bottom","_originalHeight","_verticalCenter","alignMode","node"],-6,1],["cc.Label",["_N$verticalAlign","_N$horizontalAlign","_lineHeight","_N$fontFamily","_string","_fontSize","_isSystemFontUsed","_N$overflow","_enableWrapText","_N$cacheMode","_styleFlags","node","_materials","_N$file"],-8,1,3,6],["cc.Button",["_N$transition","zoomScale","duration","_N$enableAutoGrayEffect","node","_N$target","_N$pressedColor","_N$normalColor","_N$hoverColor","clickEvents","_N$disabledColor","_N$normalSprite","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite"],-1,1,1,5,5,5,9,5,6,6,6,6],["cc.Node",["_name","_objFlags","_components","_contentSize","_parent","_prefab","_trs","_children","_color","_anchorPoint"],1,12,5,1,4,7,2,5,5],["cc.Node",["_name","_is3DNode","_parent","_components","_contentSize","_prefab","_trs","_children"],1,1,2,5,4,7,2],["cc.PhysicsBoxCollider",["_restitution","_density","_friction","node","_size"],0,1,5],["cc.Layout",["_N$layoutType","_resize","_N$paddingTop","_N$spacingX","_N$paddingLeft","_N$paddingRight","_N$paddingBottom","_N$spacingY","_N$startAxis","node","_layoutSize"],-6,1,5],["cc.Sprite",["_sizeMode","_type","node","_materials","_spriteFrame"],1,1,3,6],["cc.Mask",["_N$inverted","_N$alphaThreshold","node","_materials"],1,1,3],["cc.RigidBody",["bullet","_type","_gravityScale","_linearDamping","enabledContactListener","node"],-2,1],["cc.PrefabInfo",["fileId","root"],2,1],["cc.Scrollbar",["_N$direction","node"],2,1],["cc.ScrollView",["brake","bounceDuration","vertical","horizontal","node","_N$content","_N$horizontalScrollBar","_N$verticalScrollBar"],-1,1,1,1,1],["cc.BufferRange",["length","offset"],1],["cc.MeshRenderer",["_receiveShadows","_shadowCastingMode","node","_materials","_mesh"],1,1,3,6],["cc.Prefab",["_name"],2],["36da7JRppFEyqdxzbr+F9p9",["node","divWidget","texture"],3,1,1,6],["54e3fzs8iNC7LziQhj5aAQs",["node"],3,1],["cc.Material",["_techniqueData"],3,11],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Canvas",["_fitWidth","node","_designResolution"],2,1,5],["cc.BlockInputEvents",["node"],3,1],["60406I0SwxCtZdggmg65cQd",["node","titleNode","cardNode","main","cocosNode"],3,1,1,1,1,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.LabelShadow",["node","_color"],3,1,5],["cc.Scene",["_name","_active","_children","_anchorPoint","_trs"],1,2,5,7],["cc.Camera",["_clearFlags","_depth","_zoomRatio","node","_backgroundColor"],0,1,5],["f5dc90foL5GEJv2Vkxkx281",["node","cardNode","dots","scrollContentNode","puzzlePrefabs","card","scrollView","leftNode","rightNode","cardContent","socodingNode","socodingNodeP"],3,1,1,2,1,3,1,1,1,1,1,1,1],["ae027Z1SL5I26ZxrhfhseIy",["node","file"],3,1,6],["014a988kzNI+Zec61C9AEK0",["node","divWidget","mengAudio"],3,1,1,6],["3e647QCPYpFQ7Y3PJAQubD0",["node","imageNode"],3,1,1],["cc.Asset",["_name","_native"],1],["cc.TTFFont",["_name","_native"],1],["cc.AudioClip",["_name","_native","duration"],0],["a27b5CBqFBC2LJoxFIEJxkw",["node","divWidget"],3,1,1],["cc.Mesh",["_native","_vertexBundles","_primitives","_minPos","_maxPos"],2,9,9,5,5],["cc.mesh.VertexBundle",["verticesCount","data","formats"],2,4,9],["cc.mesh.VertexFormat",["name","type","num"],0],["cc.mesh.Primitive",["vertexBundleIndices","data"],2,4],["f97baIPCbNEo6k3S8AaVERS",["node","label"],3,1,1],["89c436VvBJIZ74yJ8Z3X4Jv",["node","layout1"],3,1,1],["7512e4Z4zdKRp7F821gswEK",["node","contentNode","scrollView","panelNode","panelDiv","splashNode","fileCardPrefab","mutiFile","singleFile"],3,1,1,1,1,1,1,6,6,6],["c91bfmjnT5FHZegph8VeBu+",["node","layout"],3,1,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["44f21Z24b5IRJ3SaXVjKBUY",["node"],3,1],["ea204mhCRpNxqC/ce3/KDaG",["node","light","model"],3,1,1,1],["cc.Light",["_type","_intensity","_spotExp","_shadowType","_shadowMinDepth","_shadowMaxDepth","_shadowFrustumSize","node"],-4,1],["01334zm8GJJ177SCOXlPviP",["node","label","midi"],3,1,1,6],["ad5daBaPrlD/qj3Dqjx91Rr",["node","slider","label","divWidget"],3,1,1,1,1],["cc.Slider",["node","slideEvents","_N$handle"],3,1,9,1],["5f9282+vH9ASrIDhOz7J2op",["node","divWidget"],3,1,1],["57741VbEjVODK2f058tNuBF",["node","divWidget"],3,1,1],["04c8f0I/qBK0KqSujxwGoZc",["node","panelNode","label","splashNode"],3,1,1,1,1],["a09785kUmdB4rbFhrk9xVwT",["node","divWidget","texture"],3,1,1,6],["77b8dQ5JSVDLb3p9QSoj4TR",["node","divWidget","sstvAudio"],3,1,1,6]],[[12,0,1,2],[0,0,8,6,10,7,9,2],[2,0,9,2],[17,0,2],[12,1,1],[0,0,11,6,10,7,9,2],[9,2,3,4,1],[9,1,0,2,3,4,3],[3,4,5,2,6,1,0,3,11,12,13,8],[2,0,2,6,9,4],[25,0,1,2,3],[9,0,2,3,4,2],[3,4,5,2,1,0,3,11,12,7],[2,0,1,3,4,5,2,6,9,8],[19,0,1],[39,0,1,2,4],[0,0,8,6,10,12,7,9,2],[5,0,4,2,5,3,6,2],[0,0,8,6,10,7,2],[0,0,8,11,6,12,7,9,2],[0,0,8,6,7,9,2],[0,0,8,11,6,10,7,2],[0,0,8,11,6,10,7,9,2],[2,0,1,4,9,4],[8,1,0,3,9,10,4],[0,0,8,6,12,7,9,2],[0,0,2,8,6,12,7,9,3],[0,0,2,8,6,12,7,3],[0,0,2,8,6,10,7,3],[0,0,8,6,10,12,7,2],[2,8,0,2,6,9,5],[20,0,1],[10,2,3,1],[10,0,2,3,2],[10,1,2,3,2],[11,1,5,2],[4,0,4,9,5,2],[23,0,1],[37,0,1,2,3,4,2],[38,0,1,2,2],[15,0,2],[15,1,0,3],[40,0,1,2],[0,0,8,11,6,7,2],[0,0,8,6,7,2],[0,0,8,6,12,7,2],[0,0,1,11,6,10,12,7,3],[0,0,1,8,6,10,12,7,9,3],[0,0,4,8,6,10,9,14,3],[6,0,2,3,5,4,6,2],[6,0,2,7,3,5,4,6,2],[6,0,2,3,5,4,2],[2,0,4,2,9,4],[2,0,1,3,5,2,9,6],[2,0,1,9,3],[2,0,1,3,2,9,5],[2,0,1,3,4,5,9,6],[2,0,1,3,7,2,9,6],[2,0,1,3,7,9,5],[2,0,2,9,3],[2,0,3,4,9,4],[3,4,1,0,3,11,12,5],[3,4,5,2,8,1,0,9,11,12,8],[3,4,5,2,0,3,7,11,12,7],[9,1,0,2,3,3],[7,3,4,1],[4,1,0,4,5,3],[4,2,0,4,9,7,6,8,10,5,3],[4,1,0,4,9,5,3],[4,0,4,9,7,6,8,5,2],[4,0,4,9,7,6,10,5,11,12,13,14,2],[4,0,4,9,7,6,8,2],[33,0,1,3],[34,0,1,3],[35,0,1,2,4],[46,0,1],[16,0,1,2,3,4,3],[0,0,5,11,6,7,9,3],[0,0,8,11,6,7,9,2],[0,0,3,8,11,6,12,7,3],[0,0,1,6,7,3],[0,0,3,8,6,7,9,3],[0,0,1,8,11,6,12,7,3],[0,0,3,8,6,12,7,9,3],[0,0,1,8,11,6,7,3],[0,0,1,8,6,12,7,3],[0,0,8,6,2],[0,0,11,6,10,7,2],[0,0,8,11,10,7,9,2],[0,0,3,2,8,11,6,10,12,7,9,4],[0,0,2,8,11,6,10,12,7,9,3],[0,0,1,6,10,7,13,9,3],[0,0,1,8,11,6,10,7,3],[0,0,4,8,11,10,9,14,3],[0,0,2,8,6,10,12,7,9,3],[0,0,4,8,6,10,13,9,3],[0,0,2,11,6,10,12,7,9,3],[0,0,3,2,11,6,10,12,7,9,4],[0,0,8,11,6,10,12,7,9,2],[5,0,7,2,3,2],[5,0,4,7,2,3,2],[5,0,1,4,7,2,8,3,9,6,3],[5,0,1,4,2,3,9,6,3],[5,0,4,7,2,5,8,3,2],[5,0,1,4,7,2,5,8,3,9,6,3],[5,0,1,4,2,5,3,9,6,3],[5,0,1,2,5,8,3,6,3],[5,0,4,2,5,3,2],[6,0,2,3,4,2],[6,0,1,2,3,5,6,3],[2,0,1,3,9,4],[2,0,1,3,4,2,9,6],[2,0,6,9,3],[2,0,3,9,3],[2,0,1,3,5,2,6,9,7],[2,0,5,9,3],[2,0,1,2,6,9,5],[2,0,4,5,2,6,9,6],[2,0,7,9,3],[2,0,4,5,9,4],[2,1,3,4,5,9,5],[3,4,5,8,10,1,0,3,7,9,11,12,10],[3,5,2,6,1,0,3,11,12,7],[3,4,5,2,6,1,0,7,11,12,13,8],[3,4,2,1,0,3,7,11,12,7],[3,4,5,2,6,1,0,11,12,13,7],[3,5,2,1,0,3,11,12,6],[3,4,5,2,6,1,0,3,7,11,12,13,9],[3,1,0,3,11,12,4],[3,4,2,1,0,3,11,12,6],[3,4,5,2,1,0,3,7,11,12,8],[3,2,1,0,3,11,12,5],[3,5,2,6,1,0,3,11,12,13,7],[3,4,5,2,6,7,11,12,6],[18,0,1,2,1],[21,0,1,3],[10,2,1],[11,0,5,2],[11,5,1],[11,2,3,4,5,4],[7,0,3,4,2],[7,1,2,0,3,4,4],[7,1,0,3,4,3],[7,2,3,4,2],[22,0,1,2,2],[4,0,4,7,6,8,10,5,11,12,13,14,2],[4,0,4,9,6,8,2],[4,0,4,7,6,8,5,2],[4,3,0,4,6,10,5,3],[4,1,0,4,7,6,8,5,3],[24,0,1,2,3,4,1],[8,1,0,8,4,5,2,6,3,7,9,10,10],[8,1,0,9,10,3],[8,1,0,4,5,2,6,3,7,9,10,9],[8,0,2,9,10,3],[13,1,1],[13,0,1,2],[14,2,0,1,4,5,6,7,4],[14,3,0,1,4,5,6,7,4],[26,0,1,1],[27,0,1,2,3,4,3],[28,0,1,2,3,4,4],[29,0,1,2,3,4,5,6,7,8,9,10,11,1],[30,0,1,1],[31,0,1,2,1],[32,0,1,1],[36,0,1,1],[41,0,1,1],[42,0,1,1],[43,0,1,2,3,4,5,6,7,8,1],[44,0,1,1],[45,0,1,2,4],[47,0,1,2,1],[16,0,2,3,4,2],[48,0,1,2,3,4,5,6,7,8],[49,0,1,2,1],[50,0,1,2,3,1],[51,0,1,2,1],[52,0,1,1],[53,0,1,1],[54,0,1,2,3,1],[55,0,1,2,1],[56,0,1,2,1]],[[[[3,"MSJumpJump"],[5,"MSJumpJump",[-3],[[2,45,-2]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[21,"Main",1,[-5],[[9,45,1920,1080,-4]],[0,"6aKUVr76hAco7FX3FMJ3OL",1],[5,1920,1080]],[18,"Label",2,[[61,"./?scene=MSJump",1,1,"",-6,[0]]],[0,"5c5eHXjbJAcpiJQjXRA59k",1],[5,332.38,50.4]]],0,[0,2,1,0,0,1,0,-1,2,0,0,2,0,-1,3,0,0,3,0,4,1,6],[0],[-1],[0]],[[[3,"Meow"],[5,"Meow",[-5],[[2,45,-2],[134,-4,-3,0]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[17,"Dom",1,[[-6,[13,45,810,810,440,340,500,500,-7]],1,4],[0,"4ebiVeujNFapKugZNa/COh",1],[5,300,300],[0,-50,0,0,0,0,1,1,1,1]],[14,2]],0,[0,2,1,0,0,1,0,7,3,0,0,1,0,-1,2,0,-1,3,0,0,2,0,4,1,7],[0],[16],[16]],[[{"name":"arrow-left","rect":[8,8,32,32],"offset":[0,0],"originalSize":[48,48],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[17]],[[[31,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4291559501]]]]]],0,0,[0],[14],[9]],[[[3,"QRCode"],[5,"QRCode",[-3],[[2,45,-2]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[18,"qrcode",1,[[6,-4,[0],1]],[0,"194GykhVJBw7V63Ogfxd4K",1],[5,282,282]]],0,[0,2,1,0,0,1,0,-1,2,0,0,2,0,4,1,4],[0,0],[-1,1],[0,18]],[[{"name":"qrcode","rect":[9,9,282,282],"offset":[0,0],"originalSize":[300,300],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[19]],[[[135,"Main",null],[99,"Main",[-4,-5,-6,-7,-8,-9],[[[2,45,-1],-2,[32,-3,[81]]],4,1,4],[5,1920,1080]],[19,"TitleBackground",1,[-14,-15,-16,-17],[[7,1,0,-10,[23],24],[52,41,60,100,-11],[137,true,-12],[140,0.4,-13,[5,1920,100]]],[4,4282532418],[5,1920,100],[0,430,0,0,0,0,1,1,1,1]],[77,"Canvas","91pElQzjBF1bkH6ILl55IQ",[-20,-21,-22,1,-23],[[144,true,-18,[5,1920,1080]],[2,45,-19]],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[78,"PuzzleCard",1,[-26,-27,-28],[[138,-24],[141,10,0.7,1,-25,[5,1720,700]]],[5,1720,700],[0,1080,0,0,0,0,1,1,1,1]],[20,"Dot",2,[[6,-29,[17],18],[53,12,60,1834,-27,26,-30],[66,2,3,-32,-31],[35,0,-33],[65,-34,[5,26,26]]],[5,26,26],[-887,-64,0,0,0,0,1,1,1,0]],[20,"Dot",2,[[6,-35,[19],20],[53,36,60,60,-27,26,-36],[66,2,3,-38,-37],[35,0,-39],[65,-40,[5,26,26]]],[5,26,26],[887,-64,0,0,0,0,1,1,1,0]],[79,"Card",false,1,[-43,-44,-45,-46],[[2,45,-41],[37,-42]],[4,4280361249],[5,1920,1080]],[43,"StartButton",1,[-55],[[145,1,-48,[4,4293322470],[4,4291348680],[4,4294964394],[4,3363338360],-47,28,29,30,31],[2,18,-49],[139,0,1,true,-50],[142,10,0.5,-51,[5,200,60]],[150,-54,2,4,-53,-52]],[5,200,60]],[43,"CardMain",7,[-58,-59,-60,-61],[[2,45,-56],[136,-57]],[5,1920,1080]],[19,"TitleBackground",9,[-64,-65,-66,-67],[[7,1,0,-62,[70],71],[52,41,60,100,-63]],[4,4282532418],[5,1920,100],[0,430,0,0,0,0,1,1,1,1]],[25,"left",9,[[12,"《",200,200,1,1,"",-68,[73]],[54,8,20,-69],[67,0.2,1,-71,[[10,"f5dc90foL5GEJv2Vkxkx281","toLastLevel",1]],[4,4282729797],[4,4294951521],[4,4292006610],[4,4280032284],-70]],[4,4282729797],[5,200,252],[-890,0,0,0,0,0,1,0.5,0.5,0.5]],[25,"right",9,[[12,"》",200,200,1,1,"",-72,[74]],[110,32,20,20,-73],[67,0.2,1,-75,[[10,"f5dc90foL5GEJv2Vkxkx281","toNextLevel",1]],[4,4282729797],[4,4294951521],[4,4292006610],[4,4280032284],-74]],[4,4282729797],[5,200,252],[890,0,0,0,0,0,1,0.5,0.5,0.5]],[19,"TextBackground",1,[-80],[[11,0,-76,[77],78],[111,44,-1000,-1000,80,100,-77],[35,0,-78],[143,1,-79,[5,1920,80]]],[4,4279308561],[5,3920,80],[0,-500,0,0,0,0,1,1,1,1]],[100,"ScrollView",4,[-83,-84],[[-81,[9,45,240,250,-82]],1,4],[5,1720,700]],[101,"scrollBar",512,14,[-88],[[-85,[9,41,12,12,-86],[7,1,0,-87,[11],12]],1,4,4],[4,4282532418],[5,1720,12],[0,1,0.5],[860,344,0,0,0,0,1,1,1,1]],[80,"content",512,[[151,1,3,1,40,40,30,30,20,20,-89,[5,380,700]],[112,5,800,-90]],[5,380,700]],[81,"cocos",false,1,[[6,-91,[13],14],[23,9,40,40,-92],[146,1,-93,[[10,"f5dc90foL5GEJv2Vkxkx281","openCocos",1]],[4,4282532418],[4,4289440683]]],[5,83,120],[-878.5,440,0,0,0,0,1,1,1,1]],[20,"help-circle",2,[[6,-94,[21],22],[113,32,40,-95],[36,3,-97,[[10,"f5dc90foL5GEJv2Vkxkx281","openHelp",1]],-96]],[5,40,40],[900,0,0,0,0,0,1,1,1,0]],[82,"Background",512,8,[-100],[[7,1,0,-98,[26],27],[30,0,45,100,40,-99]],[4,4293322470],[5,200,60]],[20,"arrow-left",10,[[11,0,-101,[66],67],[54,10,60,-102],[68,1.5,3,-104,[[10,"f5dc90foL5GEJv2Vkxkx281","closeCard",1]],-103]],[5,40,40],[-880,0,0,0,0,0,1,1,1,0]],[20,"key",10,[[11,0,-105,[68],69],[55,34,60,56,40,-106],[68,1.5,3,-108,[[10,"f5dc90foL5GEJv2Vkxkx281","openOJ",1]],-107]],[5,48,48],[880,0,0,0,0,0,1,1,1,0]],[25,"LOGOMain",3,[[69,1,-110,[[10,"f5dc90foL5GEJv2Vkxkx281","toSoCoding",1]],[4,4292335575],[4,4294944512],[4,4294957457],-109],[6,-111,[75],76]],[4,4292335575],[5,414,85],[0,0,0,0,0,0,1,0.5,0.5,0.5]],[83,"LOGO",false,13,[[69,1,-113,[[10,"f5dc90foL5GEJv2Vkxkx281","toSoCoding",1]],[4,4292335575],[4,4294944512],[4,4294957457],-112],[6,-114,[79],80]],[4,4292335575],[5,414,85],[0,0,0,0,0,0,1,0.5,0.5,0.5]],[19,"back2",3,[-117],[[9,45,400,400,-115],[33,true,-116,[4]]],[4,4278190080],[5,960,540],[0,0,0,0,0,0,1,2,2,1]],[84,"view",512,14,[16],[[34,0,-118,[10]],[9,45,240,250,-119]],[5,1720,700]],[19,"shadow",7,[-122],[[9,45,400,400,-120],[33,true,-121,[57]]],[4,4278190080],[5,960,540],[0,0,0,0,0,0,1,2,2,1]],[19,"back2",10,[-125],[[9,45,400,400,-123],[33,true,-124,[64]]],[4,4278190080],[5,960,50],[0,0,0,0,0,0,1,2,2,2]],[44,"content",9,[[2,45,-126],[32,-127,[72]]],[5,1920,1080]],[26,"back",107,3,[[7,2,0,-128,[0],1],[9,45,400,400,-129]],[4,4294956709],[5,960,540],[0,0,0,0,0,0,1,2,2,1]],[27,"frame",142.03500000000003,24,[[11,0,-130,[2],3],[13,45,-100,-100,-50,-50,400,400,-131]],[4,4278190080],[5,1160,640]],[19,"back",4,[-133],[[9,45,400,400,-132]],[4,4278190080],[5,860,350],[0,0,0,0,0,0,1,2,2,2]],[27,"frame",142.03500000000003,31,[[11,0,-134,[5],6],[13,45,-65,-65,-35,-35,400,400,-135]],[4,4278190080],[5,990,420]],[45,"bg",4,[[2,45,-136],[7,1,0,-137,[7],8]],[4,4278190080],[5,1720,700]],[102,"bar",512,15,[[-138,[2,2,-139]],1,4],[5,30,10],[0,1,0],[0,-5,0,0,0,0,1,1,1,1]],[155,15],[157,false,0.75,0.23,14,16,35,35],[44,"Title",2,[[8,"2021 SoCoding 1024 Puzzle Game",60,60,false,1,1,"",-140,[15],16],[159,-141,[4,4278190080]]],[5,945,75.6]],[85,"Label",512,19,[[121,"开启谜题",30,false,1,1,1,"",1,1,-142,[25]],[9,45,100,40,-143]],[4,4278190080],[5,200,60]],[27,"frame",82.36500000000001,26,[[11,0,-144,[55],56],[13,45,-100,-100,-50,-50,400,400,-145]],[4,4278190080],[5,1160,640]],[45,"back",7,[[9,45,400,400,-146],[11,0,-147,[58],59]],[4,4280361249],[5,1920,1080]],[26,"back2",77.265,7,[[7,2,0,-148,[60],61],[9,45,400,400,-149]],[4,4291077631],[5,960,540],[0,0,0,0,0,0,1,2,2,1]],[26,"frame",70.635,27,[[11,0,-150,[62],63],[114,45,-150,-150,-8,400,400,-151]],[4,4278190080],[5,1260,58],[0,-4,0,0,0,0,1,1,1,1]],[160,"New Node",false,[3],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[86,"Main Camera",3,[[161,7,-1,2,-152,[4,4280361249]]]],[64,1,0,34,[9]],[162,1,4,[5,6],16,[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],7,36,11,12,28,22,23],[108,"Title",10,[-153],[5,0,75.6]],[122,60,60,false,1,1,"",47,[65]]],0,[0,0,1,0,-2,46,0,0,1,0,-1,4,0,-2,17,0,-3,2,0,-4,8,0,-5,7,0,-6,13,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,37,0,-2,5,0,-3,6,0,-4,18,0,0,3,0,0,3,0,-1,29,0,-2,24,0,-3,44,0,-5,22,0,0,4,0,0,4,0,-1,31,0,-2,33,0,-3,14,0,0,5,0,0,5,0,6,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,6,6,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,-1,26,0,-2,40,0,-3,41,0,-4,9,0,6,19,0,0,8,0,0,8,0,0,8,0,0,8,0,22,17,0,23,46,0,0,8,0,-1,19,0,0,9,0,0,9,0,-1,10,0,-2,28,0,-3,11,0,-4,12,0,0,10,0,0,10,0,-1,27,0,-2,47,0,-3,20,0,-4,21,0,0,11,0,0,11,0,6,11,0,0,11,0,0,12,0,0,12,0,6,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,23,0,-1,36,0,0,14,0,-1,15,0,-2,25,0,-1,35,0,0,15,0,0,15,0,-1,34,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,6,18,0,0,18,0,0,19,0,0,19,0,-1,38,0,0,20,0,0,20,0,6,20,0,0,20,0,0,21,0,0,21,0,6,21,0,0,21,0,6,22,0,0,22,0,0,22,0,6,23,0,0,23,0,0,23,0,0,24,0,0,24,0,-1,30,0,0,25,0,0,25,0,0,26,0,0,26,0,-1,39,0,0,27,0,0,27,0,-1,42,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,-1,32,0,0,32,0,0,32,0,0,33,0,0,33,0,-1,45,0,0,34,0,0,37,0,0,37,0,0,38,0,0,38,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,44,0,-1,48,0,24,43,1,8,3,3,8,43,16,8,25,35,17,45,35,18,36,46,25,48,153],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,46,48,46],[-1,1,-1,1,-1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,5,-1,1,-1,1,-1,1,-1,1,-1,-1,1,9,10,11,12,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-1,1,-1,-1,1,-1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,-1,-1,-1,1,-1,1,-1,1,-1,1,26,5,27],[0,10,0,4,0,0,4,0,2,0,0,0,6,0,20,0,7,0,5,0,5,0,21,0,2,0,0,2,3,11,3,8,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,0,4,0,0,6,0,10,0,4,0,0,0,45,0,46,0,2,0,0,0,0,13,0,6,0,13,0,2,47,7,48]],[[[3,"Flag"],[5,"Flag",[-4,-5],[[2,45,-2],[163,-3,8]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[46,"Background",512,[-8],[[7,1,0,-6,[2],3],[30,0,45,100,40,-7]],[0,"10IijGHfRLSohRlm1AQ2a7",1],[4,4293322470],[5,300,90]],[22,"Button",1,[2],[[70,1,-9,[[10,"ae027Z1SL5I26ZxrhfhseIy","download",1]],[4,4293322470],[4,4291348680],[4,3363338360],2,4,5,6,7]],[0,"17Yo7hW4ROwqaQPjk/Qt1E",1],[5,300,90],[0,-200,0,0,0,0,1,1,1,1]],[18,"Label",1,[[12,"$ ./Flag",60,60,1,1,"",-10,[0]]],[0,"76zf4WaA9EmrfQ3adN2IJ/",1],[5,200.1,75.6]],[47,"Label",512,2,[[62,"Download",60,90,false,1,1,1,-11,[1]]],[0,"adF/WCO3hE+Jdw0g8Hb88Z",1],[4,4278190080],[5,266.84,113.4],[0,0,0,0,0,0,1,0.6,0.6,1]]],0,[0,2,1,0,0,1,0,0,1,0,-1,4,0,-2,3,0,0,2,0,0,2,0,-1,5,0,0,3,0,0,4,0,0,5,0,4,1,2,8,3,11],[0,0,0,0,0,0,0,0,0],[-1,-1,-1,1,9,10,11,12,28],[0,0,0,3,3,11,3,8,49]],[[{"name":"socoding","rect":[25,30,414,85],"offset":[-0.5,-8.5],"originalSize":[465,128],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[50]],[[[3,"Meng"],[5,"Meng",[-5],[[2,45,-2],[164,-4,-3,0]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[17,"Dom",1,[[[56,45,200,200,250,150,-6],-7],4,1],[0,"4ebiVeujNFapKugZNa/COh",1],[5,1520,680],[0,-50,0,0,0,0,1,1,1,1]],[14,2]],0,[0,2,1,0,0,1,0,7,3,0,0,1,0,-1,2,0,0,2,0,-2,3,0,4,1,7],[0],[29],[51]],[[{"name":"default_btn_disabled","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[3],[52]],[[[3,"Lang7"],[5,"Lang7",[-5,-6],[[2,45,-2],[165,-4,-3]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[1,"7lang",1,[[6,-7,[0],1],[13,40,510,510,294,294,900,492,-8]],[0,"4578l3D+ZAk4khCoKtPoHW",1],[5,900,492],[0,50,0,0,0,0,1,1,1,1]],[1,"Label",1,[[123,"134579   135679\n7   1\n1   7",100,100,false,1,1,3,-9,[2],3],[115,4,130,-10]],[0,"fb3lIXg5REAp+hhCWPgvEq",1],[5,2000,326],[0,-328.5,0,0,0,0,1,0.5,0.5,0.2]]],0,[0,2,1,0,0,1,0,30,2,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,3,0,0,3,0,4,1,10],[0,0,0,0],[-1,1,-1,5],[0,53,0,1]],[[{"name":"key","rect":[0,0,48,48],"offset":[0,0],"originalSize":[48,48],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[54]],[[[72,"flag",".out"],-1],0,0,[],[],[]],[[{"name":"3","rect":[0,0,1024,1214],"offset":[0,0],"originalSize":[1024,1214],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[55]],[[{"name":"character","rect":[0,0,374,374],"offset":[0,0],"originalSize":[374,374],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[56]],[[{"name":"file-outline","rect":[8,4,32,40],"offset":[0,0],"originalSize":[48,48],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[57]],[[[73,"HARRYP","HARRYP.ttf"],-1],0,0,[],[],[]],[[[74,"Meng",".mp3",120.502857],-1],0,0,[],[],[]],[[{"name":"1","rect":[0,0,1024,1260],"offset":[0,0],"originalSize":[1024,1260],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[58]],[[{"name":"back","rect":[0,0,400,400],"offset":[0,0],"originalSize":[400,400],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[59]],[[[3,"AESECB"],[5,"AESECB",[-5,-6,-7],[[2,45,-2],[166,-4,-3]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[1,"Text",1,[[124,"旅行者清理完一处丘丘人营地后，发现了一个特殊的宝箱，你发现宝箱底下刻着奇怪的符号和一行字：“咒语只能念三遍，千万不要念四遍！”",50,1,1,"",3,-8,[0]],[57,42,400,400,200,300,-9]],[0,"1b773kqpVJM55g2TKyGQkW",1],[5,1120,163],[0,200,0,0,0,0,1,1,1,1]],[17,"Dom",1,[[-10,[58,42,400,400,-200,-11]],1,4],[0,"1b5fNWYvxAkL2QBUHnYliU",1],[5,1120,60],[0,-200,0,0,0,0,1,1,1,1]],[18,"Label",1,[[125,"AES-ECB",100,100,false,1,1,-12,[1],2]],[0,"4cU7VTlw9N0JC3NDx6iCvG",1],[5,322.7,126]],[14,3]],0,[0,2,1,0,0,1,0,7,5,0,0,1,0,-1,2,0,-2,4,0,-3,3,0,0,2,0,0,2,0,-1,5,0,0,3,0,0,4,0,4,1,12],[0,0,0],[-1,-1,5],[0,0,1]],[[[38,".bin",[[39,6996,[40,223872],[[15,"a_normal",5126,3],[15,"a_position",5126,3],[15,"a_uv0",5126,2]]]],[[42,[0],[41,223872,22104]]],[1,0.000375552277546376,-0.0010677466634661,-0.0103999990969896],[1,0.0241458024829626,0.00592047162353992,0]],-1],0,0,[],[],[]],[[[38,".bin",[[39,13774,[40,440768],[[15,"a_normal",5126,3],[15,"a_position",5126,3],[15,"a_uv0",5126,2]]]],[[42,[0],[41,440768,43584]]],[1,0.0000073637702371343,-0.00172312231734395,-0.0103999990969896],[1,0.0406480096280575,0.00591310719028115,0]],-1],0,0,[],[],[]],[[[3,"Twelve"],[5,"Twelve",[-5],[[2,45,-2],[167,-4,-3]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[49,"Label",1,[-6],[0,"7aBQG7P4lHvpeudQVc1TSP",1],[5,2310.55,100.8],[0,0,0,0,0,0,1,0.5,0.5,1]],[126,80,80,1,1,"",2,[0]]],0,[0,2,1,0,0,1,0,13,3,0,0,1,0,-1,2,0,-1,3,0,4,1,6],[0],[-1],[0]],[[[3,"FindWaifu"],[87,"FindWaifu",[-6],[[2,45,-2],[168,-4,-3],[32,-5,[10]]],[4,-1],[5,1920,1080]],[50,"Layout",1,[-8,-9,-10,-11],[-7],[0,"81VXAvtMdNgaBJ35R4prLF",1],[5,1920,3201.6],[0,-518.4,0,0,0,0,1,1,1,1]],[88,"Layout",2,[-12,-13,-14],[0,"13KI5r4C9KkYNjgocjCPss",1],[5,3092,1416],[0,392,0,0,0,0,1,1,1,1]],[1,"Label1",2,[[63,"今天小风在赶去上课的路上回信息手机不小心把手机掉进了水坑里。虽然他的手机有IP68防水，但是存在手机里的老婆居然掉色了。花心的小风一时间竟分不清自己的老婆，请大家帮帮他。下面有三张动漫角色的图，请按照顺序将角色名称（中文全称）加密成Base64码。",80,80,1,"",3,-15,[0]]],[0,"91GEwWjx9PJK9fJQC9WrRt",1],[5,1700,500.79999999999995],[0,1350.4,0,0,0,0,1,0.5,0.5,0.5]],[1,"1",3,[[6,-16,[1],2]],[0,"1bu29DcwtHaK3iAS81MWiq",1],[5,1024,1260],[-1034,0,0,0,0,0,1,1,1,1]],[18,"2",3,[[6,-17,[3],4]],[0,"17qu7iyuFHFJhfVNCZuQxK",1],[5,1024,1416]],[1,"3",3,[[6,-18,[5],6]],[0,"5dC5yph4pOhJJ4tuWTdHh/",1],[5,1024,1214],[1034,0,0,0,0,0,1,1,1,1]],[1,"Label1 copy",2,[[63,"小风尊敬的前辈嘉琳藏在私密相册里的小老婆因为长期不见天日也脱色了，你能偷偷帮他认出来吗？",80,80,1,"",3,-19,[7]]],[0,"715Gp35txDOauBJEBRfwIw",1],[5,1500,260.79999999999995],[0,-446.4,0,0,0,0,1,0.5,0.5,0.5]],[1,"+0",2,[[6,-20,[8],9]],[0,"adiI+nELNJWp1RXFoykLVk",1],[5,2080,1024],[0,-1088.8,0,0,0,0,1,1,1,1]],[152,1,2,2,[5,1920,3201.6]]],0,[0,2,1,0,0,1,0,31,10,0,0,1,0,0,1,0,-1,2,0,-1,10,0,-1,4,0,-2,3,0,-3,8,0,-4,9,0,-1,5,0,-2,6,0,-3,7,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,4,1,20],[0,0,0,0,0,0,0,0,0,0,0],[-1,-1,1,-1,1,-1,1,-1,-1,1,-1],[0,0,60,0,61,0,62,0,0,63,0]],[[[3,"Directory"],[5,"Directory",[-9,-10],[[2,45,-2],[169,-8,-7,-6,-5,-4,-3,15,16,17]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[89,"Panel",false,253,1,[-12,-13,-14,-15],[[37,-11]],[0,"103/buQD5FmY09pjVZHPZg",1],[4,4280885537],[5,900,500],[0,0,0,0,0,0,1,1,1,0]],[103,"ScrollView",1,[-19,-20],[[-16,[13,45,300,300,200,200,240,250,-17],[7,1,0,-18,[4],5]],1,4,4],[0,"dfTsmQ8fZK/o9KtXoMYIfp",1],[4,4282532418],[5,1320,680]],[90,"splash",200,2,[-23,-24],[[7,1,0,-21,[13],14],[59,41,100,-22]],[0,"10JguDqPtGbomGyZHRoSMn",1],[4,4280619538],[5,900,64],[0,218,0,0,0,0,1,1,1,1]],[104,"scrollBar",512,3,[-28],[[-25,[116,37,1308,12,12,-26],[7,1,0,-27,[2],3]],1,4,4],[0,"5cR9RuR/BPN5pVVhMgZbhP",1],[4,4282532418],[5,12,680],[0,1,0.5],[660,0,0,0,0,0,1,1,1,1]],[91,"content",512,[[153,1,3,64,64,30,30,20,20,-29,[5,1320,800]],[117,40,-60,-60,380,800,-30]],[0,"aaXgFF52ZBt78hl6p4dWE2",1],[5,1320,800],[0,0,0.5],[-660,0,0,0,0,0,1,1,1,1]],[16,"close-box",4,[[6,-31,[11],12],[60,33,14,14,-32],[36,3,-34,[[10,"7512e4Z4zdKRp7F821gswEK","closePanel",1]],-33]],[0,"c80XXEMNNCnYqFaB/zqaxe",1],[4,4285690623],[5,36,36],[418,0,0,0,0,0,1,1,1,0]],[92,"view",512,3,[6],[[34,0,-35,[1]],[9,45,240,250,-36]],[0,"905THrLxxLi5z2PbnEKynR",1],[5,1320,680]],[105,"bar",512,5,[[-37,[2,2,-38]],1,4],[0,"02bEAPUMZARLtkUZ7VofRZ",1],[5,12,10],[0,1,0],[0,-5,0,0,0,0,1,1,1,1]],[156,1,5],[158,false,0.75,0.23,3,6,10,10],[28,"shadow",99.45,2,[[11,0,-39,[6],7],[13,45,-100,-100,-50,-50,1000,1000,-40]],[0,"70diaW+ZFMQoXezImfuxI8",1],[5,1100,600]],[29,"bg",2,[[7,1,0,-41,[8],9],[2,45,-42]],[0,"72IdGRH3BPDbTUH8rUJ/5i",1],[4,4280885537],[5,900,500]],[1,"Title",4,[[61,"文件查看器",1,1,"",-43,[10]],[23,18,350,232,-44]],[0,"5bWFhUcspPZZO8YDq/Z+av",1],[5,200,50.4],[0,0,0,0,0,0,1,0.7,0.7,1]],[17,"Div",2,[[[13,45,25,25,100,50,22.25,63,-45],-46],4,1],[0,"e5GjLMm7JLxYGCW1H/O2h/",1],[5,850,350],[0,-25,0,0,0,0,1,1,1,1]],[64,1,0,9,[0]],[14,15]],0,[0,2,1,0,0,1,0,19,4,0,32,17,0,20,2,0,33,11,0,34,6,0,0,1,0,-1,3,0,-2,2,0,0,2,0,-1,12,0,-2,13,0,-3,4,0,-4,15,0,-1,11,0,0,3,0,0,3,0,-1,5,0,-2,8,0,0,4,0,0,4,0,-1,14,0,-2,7,0,-1,10,0,0,5,0,0,5,0,-1,9,0,0,6,0,0,6,0,0,7,0,0,7,0,6,7,0,0,7,0,0,8,0,0,8,0,-1,16,0,0,9,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,-2,17,0,4,1,6,8,8,10,17,16,10,18,11,46],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16],[-1,-1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,-1,1,35,36,37,1],[0,0,0,6,0,2,0,4,0,2,0,0,14,0,2,64,15,65,2]],[[{"name":"+0","rect":[0,0,2080,1024],"offset":[0,0],"originalSize":[2080,1024],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[66]],[[{"name":"2","rect":[0,0,1024,1416],"offset":[0,0],"originalSize":[1024,1416],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[67]],[[[3,"Jump"],[5,"Jump",[-5],[[2,45,-2],[170,-4,-3]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[21,"Layout",1,[-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21],[[24,1,1,10,-6,[5,563.29,500]]],[0,"9cAngB4LlHOpW+SEWGo8rW",1],[5,563.29,500]],[1,"Label",2,[[8,"L",70,90,false,1,1,"",-22,[0],1]],[0,"f5RvVEQ5VHT6w/T5ewMGxe",1],[5,36.89,113.4],[-263.2,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"2",70,90,false,1,1,"",-23,[2],3]],[0,"55Z7h+jjdLiYJJ3sGTaTXO",1],[5,31.01,113.4],[-219.25,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"0",70,90,false,1,1,"",-24,[4],5]],[0,"d6WW2hhlpCMLPD8h4AVgDm",1],[5,34.09,113.4],[-176.7,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"a",70,90,false,1,1,"",-25,[6],7]],[0,"fcPmF7ORlD1qcVGhbeqrHi",1],[5,19.53,113.4],[-139.89,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"a",70,90,false,1,1,"",-26,[8],9]],[0,"67V5u6ZdBFXavgE2XkAv4D",1],[5,19.53,113.4],[-110.36,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"1",70,90,false,1,1,"",-27,[10],11]],[0,"08fTXM9l1G96X1BGexdgvu",1],[5,20.16,113.4],[-80.515,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"2",70,90,false,1,1,"",-28,[12],13]],[0,"8dTdOqo45FQa5E7/w3j3Xt",1],[5,31.01,113.4],[-44.93,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"S",70,90,false,1,1,"",-29,[14],15]],[0,"b0egYTjA5Bk7BCr/ioJTzo",1],[5,31.57,113.4],[-3.639999999999997,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"X",70,90,false,1,1,"",-30,[16],17]],[0,"11HeJztVtOkah7whzv5TcB",1],[5,36.61,113.4],[40.45,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"z",70,90,false,1,1,"",-31,[18],19]],[0,"34lHWFquNOE7pQntla7ZtB",1],[5,24.08,113.4],[80.795,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"p",70,90,false,1,1,"",-32,[20],21]],[0,"adEq//sylPP5AR2B0sQW25",1],[5,23.52,113.4],[114.59500000000001,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"p",70,90,false,1,1,"",-33,[22],23]],[0,"142+EaOuJGQ4OegV+inyPB",1],[5,23.52,113.4],[148.115,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"b",70,90,false,1,1,"",-34,[24],25]],[0,"adNSQIWwJBN5/p1xjUj9rl",1],[5,20.51,113.4],[180.13,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"C",70,90,false,1,1,"",-35,[26],27]],[0,"4bbNbEkRBPQY58XpSpeJLb",1],[5,34.09,113.4],[217.43,0,0,0,0,0,1,1,1,1]],[1,"Label copy",2,[[8,"7",70,90,false,1,1,"",-36,[28],29]],[0,"6eUGeKiDlOTIWGFBmjN/AK",1],[5,37.17,113.4],[263.06000000000006,0,0,0,0,0,1,1,1,1]]],0,[0,2,1,0,0,1,0,38,2,0,0,1,0,-1,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-11,13,0,-12,14,0,-13,15,0,-14,16,0,-15,17,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,4,1,36],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5],[0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]],[[[3,"FileCard"],[5,"FileCard",[-4,-5],[[147,1,-3,[4,4282532418],[4,4284506208],[4,4283453520],-2]],[4,-1],[5,100,100],[90,0,0,0,0,0,1,1,1,1]],[21,"Layout",1,[-8,-9],[[154,2,10,-6,[5,100,100]],[9,45,300,200,-7]],[0,"eeHFLyNQJFypC05I7NibwR",1],[5,100,100]],[29,"Background",1,[[2,45,-10],[7,1,0,-11,[0],1]],[0,"3bbvYZF59JoI8G3uR9eEaJ",1],[4,4282532418],[5,100,100]],[1,"Name",2,[[127,"file",46,50,false,1,1,"",1,-12,[4],5],[55,40,-20,-20,406.35,-13]],[0,"d0kzjf6ihCaoPeeRzOdyvE",1],[5,280,50.4],[0,-33.2,0,0,0,0,1,0.5,0.5,0.5]],[1,"image",2,[[6,-14,[2],3]],[0,"fe6ioQ8zFAtJAAzfH7Rfrh",1],[5,40,48],[0,16,0,0,0,0,1,1,1,1]]],0,[0,2,1,0,6,3,0,0,1,0,-1,3,0,-2,2,0,0,2,0,0,2,0,-1,5,0,-2,4,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,4,1,14],[0,0,0,0,0,0],[-1,1,-1,1,-1,5],[0,2,0,15,0,7]],[[{"name":"default_panel","rect":[0,0,20,20],"offset":[0,0],"originalSize":[20,20],"capInsets":[6,6,6,6]}],[1],0,[0],[3],[68]],[[[38,".bin",[[39,121,[40,3872],[[15,"a_normal",5126,3],[15,"a_position",5126,3],[15,"a_uv0",5126,2]]]],[[42,[0],[41,3872,1200]]],[1,-5,0,-5],[1,5,0,5]],-1],0,0,[],[],[]],[[{"name":"default_sprite_splash","rect":[0,0,2,2],"offset":[0,0],"originalSize":[2,2],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[69]],[[[3,"Cha"],[5,"Cha",[-3],[[2,45,-2]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[18,"cha",1,[[6,-4,[0],1]],[0,"194GykhVJBw7V63Ogfxd4K",1],[5,374,374]]],0,[0,2,1,0,0,1,0,-1,2,0,0,2,0,4,1,4],[0,0],[-1,1],[0,70]],[[[31,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4286545791]]]]]],0,0,[0],[14],[9]],[[[171,"builtin-phong",[{"hash":3560892936,"record":null,"name":"builtin-phong|phong-vs|phong-fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nin vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n};\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  out mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  out lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nout vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform PhongFrag {\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  in mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nattribute vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform vec4 cc_lightPositionAndRange[4];\nuniform vec4 cc_lightDirection[4];\nuniform vec4 cc_lightColor[4];\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture2D(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture2D(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture2D(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture2D(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture2D(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture2D(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture2D(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"CCLIGHTS","defines":["CC_NUM_LIGHTS"]}],"samplers":[{"name":"cc_shadow_map_0","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"cc_shadow_map_1","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"CC_NUM_SHADOW_LIGHTS","type":"number","defines":["CC_USE_SHADOW_MAP"],"range":[0,3]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_SPECULAR"]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_EMISSIVE"]},{"name":"CC_NUM_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_LIGHT_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_USE_ALPHA_ATLAS_diffuseTexture","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_emissiveTexture","type":"boolean","defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_specularTexture","type":"boolean","defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]},{"name":"MAIN_TILING","binding":2,"members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":3,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PhongFrag","binding":4,"members":[{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissiveColor","type":16,"count":1},{"name":"glossiness","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"diffuseTexture","type":29,"count":1,"binding":31,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularTexture","type":29,"count":1,"binding":32,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveTexture","type":29,"count":1,"binding":33,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"normalTexture","type":29,"count":1,"binding":34,"defines":["USE_NORMAL_TEXTURE"]}]},{"hash":1165371292,"record":null,"name":"builtin-phong|shadow-map-vs|shadow-map-fs","glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n  float cc_shadow_map_bias;\n};\nout float v_depth;\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nin float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\nvarying float v_depth;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nvarying float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}],[{"passes":[{"name":"phong","program":"builtin-phong|phong-vs|phong-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"mainTiling":{"type":14,"value":[1,1]},"mainOffset":{"type":14,"value":[0,0]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"diffuseTexture":{"value":"white","type":29},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularTexture":{"value":"white","type":29},"emissiveColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveTexture":{"value":"white","type":29},"glossiness":{"type":13,"value":[10]},"normalTexture":{"value":"white","type":29}}},{"name":"shadowcast","stage":"shadowcast","program":"builtin-phong|shadow-map-vs|shadow-map-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true}}]}]]],0,0,[],[],[]],[[[3,"Algorithm1"],[5,"Algorithm",[-3,-4],[[2,45,-2]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[16,"Link",1,[[12,"http://10.191.65.243:5000/contest/view?id=324",80,80,1,1,"",-5,[1]],[71,1,-7,[[10,"44f21Z24b5IRJ3SaXVjKBUY","openWebPage",-6]],[4,4292335575],[4,4294944512],[4,4294957457]],[75,-8]],[0,"24TYM/igFIUbLAW0xzq1fG",1],[4,4292335575],[5,1661.29,100.8],[0,-100,0,0,0,0,1,0.5,0.5,1]],[1,"Label",1,[[12,"进入 SCNUOJ 完成算法题",80,80,1,1,"",-9,[0]]],[0,"fcTuoXqCJJHKZY/7z9RmZC",1],[5,933.36,100.8],[0,0,0,0,0,0,1,0.5,0.5,1]]],0,[0,2,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,21,2,0,0,2,0,0,2,0,0,3,0,4,1,9],[0,0],[-1,-1],[0,0]],[[[72,"midi",".mid"],-1],0,0,[],[],[]],[[{"name":"file-multiple","rect":[4,0,40,48],"offset":[0,0],"originalSize":[48,48],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[71]],[[[3,"MainM3D"],[5,"MainM3D",[-7,-8,-9,-10,-11],[[2,45,-2],[34,0,-3,[10]],[172,-6,-5,-4]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[93,"RootNode",true,1,[-13,-14],[0,"60JZKBXo9EI4GpZA2YxHvO",-12],[-378.62,12.638,180.735,0.6819983600624985,0,0,0.7313537016191705,200,200,200],[1,86,0,0]],[94,"back",84.15,1,[[7,2,0,-15,[2],3],[9,45,400,400,-16]],[0,"44YG1FinVPBZlN81qKrufi",1],[4,4294354431],[5,960,540],[0,0,0,0,0,0,1,2,2,1]],[28,"Splash",33,1,[[11,0,-17,[8],9],[9,45,100,100,-18]],[0,"c3mHrfeelNBp9O0vpmD6pB",1],[5,1920,1080]],[48,"Plane",true,1,[[173,true,-19,[0],1]],[0,"89Xjqt849ChoqAhmctTwUI",1],[0,0,-90,0.7071067811865475,0,0,0.7071067811865476,1000,1000,1000],[1,90,0,0]],[48,"Text1",true,2,[[76,true,1,-20,[4],5]],[0,"Text1",2],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[95,"Text2",true,2,[[76,true,1,-21,[6],7]],[0,"Text2",2],[0,0,0],[0,-0.698991060256958,0.288752734661102,0,0,0,1,100,100,100]],[109,"Light",true,1,[-22],[0,"75oS7xiDdM3o+oZ18YRwWj",1],[0,0,874.753,0,0,0,1,1,1,1]],[174,2,3,10,4,0,1000,50,8]],0,[0,2,1,0,0,1,0,0,1,0,39,2,0,40,9,0,0,1,0,-1,5,0,-2,3,0,-3,2,0,-4,8,0,-5,4,0,2,2,0,-1,6,0,-2,7,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,6,0,0,7,0,-1,9,0,4,1,22],[0,0,0,0,0,0,0,0,0,0,0],[-1,15,-1,1,-1,15,-1,15,-1,1,-1],[72,73,0,10,74,75,76,77,0,6,0]],[[[3,"Qin"],[5,"Qin",[-5,-6],[[2,45,-2],[175,-4,-3,8]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[46,"Background",512,[-9],[[7,1,0,-7,[2],3],[30,0,45,100,40,-8]],[0,"10IijGHfRLSohRlm1AQ2a7",1],[4,4293322470],[5,300,90]],[22,"Button",1,[2],[[70,1,-10,[[10,"01334zm8GJJ177SCOXlPviP","download",1]],[4,4293322470],[4,4291348680],[4,3363338360],2,4,5,6,7]],[0,"17Yo7hW4ROwqaQPjk/Qt1E",1],[5,300,90],[0,-200,0,0,0,0,1,1,1,1]],[51,"Label",1,[-11],[0,"76zf4WaA9EmrfQ3adN2IJ/",1],[5,0,50.4]],[128,1,1,"",4,[0]],[47,"Label",512,2,[[62,"Download",60,90,false,1,1,1,-12,[1]]],[0,"adF/WCO3hE+Jdw0g8Hb88Z",1],[4,4278190080],[5,266.84,113.4],[0,0,0,0,0,0,1,0.6,0.6,1]]],0,[0,2,1,0,0,1,0,13,5,0,0,1,0,-1,4,0,-2,3,0,0,2,0,0,2,0,-1,6,0,0,3,0,-1,5,0,0,6,0,4,1,2,8,3,12],[0,0,0,0,0,0,0,0,0],[-1,-1,-1,1,9,10,11,12,41],[0,0,0,3,3,11,3,8,78]],[[{"name":"7lang","rect":[0,4,900,492],"offset":[0,0],"originalSize":[900,500],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[79]],[[[3,"Watermelon"],[5,"Watermelon",[-7,-8,-9],[[2,45,-2],[176,-6,-5,-4,-3]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[106,"Handle",512,[[[7,1,2,-10,[1],2],-11,[2,2,-12]],4,1,4],[0,"94N+dHMD5FK5CVhNYC/83e",1],[4,4294947328],[5,32,32],[0,0,0,0,0,0,1,1,1,0]],[50,"Slider",1,[2],[-13],[0,"d5zFQWUNlOioZ+y4u2yaXs",1],[5,600,20],[0,-255,0,0,0,0,1,1,1,1]],[51,"Text",1,[-14],[0,"94ZIOdWIlPsK4wlXh9HBpn",1],[5,1186.64,195.6]],[129,"炎炎夏日，小强骑着摩托路过西瓜摊，打算买一个西瓜回家吃。\n小强下了车，瞅了一眼摊主，问道：“哥们儿，这瓜多少钱一斤呐？”\n摊主答道：“ 5 块钱一斤。”",60,1,1,"",4,[0]],[148,true,3,2,[4,4294967295],[4,4294967295],2],[177,3,[[10,"ad5daBaPrlD/qj3Dqjx91Rr","onSlide",1]],6],[49,"Dom",1,[-15],[0,"f1/bh5oLBHx4G8Drfv+2Yx",1],[5,600,60],[0,-380,0,0,0,0,1,1,1,1]],[14,8]],0,[0,2,1,0,0,1,0,7,9,0,13,5,0,42,7,0,0,1,0,-1,4,0,-2,3,0,-3,8,0,0,2,0,-2,6,0,0,2,0,-1,7,0,-1,5,0,-1,9,0,4,1,2,8,3,15],[0,0,0,6,6,6,6,6],[-1,-1,1,43,9,10,11,12],[0,0,5,0,5,5,5,8]],[[[3,"Algorithm2"],[5,"Algorithm",[-3,-4],[[2,45,-2]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[16,"Link",1,[[12,"http://10.191.65.243:5000/contest/view?id=324",80,80,1,1,"",-5,[1]],[71,1,-7,[[10,"44f21Z24b5IRJ3SaXVjKBUY","openWebPage",-6]],[4,4292335575],[4,4294944512],[4,4294957457]],[75,-8]],[0,"24TYM/igFIUbLAW0xzq1fG",1],[4,4292335575],[5,1661.29,100.8],[0,-100,0,0,0,0,1,0.5,0.5,1]],[1,"Label",1,[[12,"进入 SCNUOJ 完成算法题",80,80,1,1,"",-9,[0]]],[0,"fcTuoXqCJJHKZY/7z9RmZC",1],[5,933.36,100.8],[0,0,0,0,0,0,1,0.5,0.5,1]]],0,[0,2,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,21,2,0,0,2,0,0,2,0,0,3,0,4,1,9],[0,0],[-1,-1],[0,0]],[[[3,"Anime"],[5,"Anime",[-3,-4],[[2,45,-2]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[22,"Layout",1,[-6,-7,-8,-9,-10],[[24,1,1,20,-5,[5,386.01,150]]],[0,"24aUzQRONNC7+inIVyTQbs",1],[5,386.01,150],[0,-200,0,0,0,0,1,1,1,1]],[22,"Layout",1,[-13,-14,-15],[[24,1,1,40,-11,[5,2426,300]],[118,2,100,-12]],[0,"55Ku8gpT5EHZMTWFXB1S0U",1],[5,2426,300],[0,100,0,0,0,0,1,0.5,0.5,1]],[1,"lv0001",3,[[6,-16,[0],1]],[0,"f4xfkWjkZB67Itgy0qINNc",1],[5,782,551],[-822,0,0,0,0,0,1,1,1,1]],[18,"lv0002",3,[[6,-17,[2],3]],[0,"a7pA7uB41HEoPDuoyoHlO3",1],[5,782,551]],[1,"lv0003",3,[[6,-18,[4],5]],[0,"b9K+xDbAtATISiFF6M4T9E",1],[5,782,551],[822,0,0,0,0,0,1,1,1,1]],[1,"Label",2,[[12,"flag{",50,80,1,1,"",-19,[6]]],[0,"d8EtJWWNhINJjH80yU4jZC",1],[5,97.31,100.8],[-144.35,0,0,0,0,0,1,1,1,1]],[16,"alpha-a-box",2,[[11,0,-20,[7],8]],[0,"77Fx//HxhNu7Twq23KwtAA",1],[4,4289827327],[5,64,64],[-43.69499999999999,-6,0,0,0,0,1,1,1,1]],[16,"alpha-a-box",2,[[11,0,-21,[9],10]],[0,"eaacWh56ZA67cpwOdAYe5S",1],[4,4287661824],[5,64,64],[40.30500000000001,-6,0,0,0,0,1,1,1,1]],[16,"alpha-a-box",2,[[11,0,-22,[11],12]],[0,"02pUh6wo5KfI0CToYqdocX",1],[4,4281545583],[5,64,64],[124.305,-6,0,0,0,0,1,1,1,1]],[1,"Label",2,[[12,"}",50,80,1,1,"",-23,[13]]],[0,"3fp2PJvOtHSoaAVa+Yw8J+",1],[5,16.7,100.8],[184.655,0,0,0,0,0,1,1,1,1]]],0,[0,2,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,-1,7,0,-2,8,0,-3,9,0,-4,10,0,-5,11,0,0,3,0,0,3,0,-1,4,0,-2,5,0,-3,6,0,0,4,0,0,5,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,0,11,0,4,1,23],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,1,-1,1,-1,1,-1,-1,1,-1,1,-1,1,-1],[0,80,0,81,0,82,0,0,12,0,12,0,12,0]],[[{"name":"lv0003","rect":[0,0,782,551],"offset":[0,0],"originalSize":[782,551],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[83]],[[[31,[{},"0",11,[{"defines":{}},"props",11,[{},"diffuseColor",8,[4,4291601683]]]]]],0,0,[0],[14],[9]],[[{"name":"shadow","rect":[134,148,732,732],"offset":[0,-14],"originalSize":[1000,1000],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[84]],[[{"name":"alpha-a-box","rect":[6,6,36,36],"offset":[0,0],"originalSize":[48,48],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[85]],[[[3,"JSFuck"],[5,"JSFuck",[-5],[[2,45,-2],[178,-4,-3]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[17,"Dom",1,[[[56,45,200,200,250,150,-6],-7],4,1],[0,"4ebiVeujNFapKugZNa/COh",1],[5,1520,680],[0,-50,0,0,0,0,1,1,1,1]],[14,2]],0,[0,2,1,0,0,1,0,7,3,0,0,1,0,-1,2,0,0,2,0,-2,3,0,4,1,7],[],[],[]],[[{"name":"close-box","rect":[6,6,36,36],"offset":[0,0],"originalSize":[48,48],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[86]],[[{"name":"help-circle","rect":[4,4,40,40],"offset":[0,0],"originalSize":[48,48],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[87]],[[[3,"Pointer"],[5,"Pointer",[-5,-6],[[2,45,-2],[179,-4,-3]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[1,"Text",1,[[130,"看到下面一串代码，小王感觉他的脑子要裂开了！",50,60,1,1,"",3,-7,[0]],[57,42,400,400,100,300,-8]],[0,"1b773kqpVJM55g2TKyGQkW",1],[5,1120,75.6],[0,100,0,0,0,0,1,1,1,1]],[17,"Dom",1,[[-9,[58,42,400,400,-100,-10]],1,4],[0,"1b5fNWYvxAkL2QBUHnYliU",1],[5,1120,190],[0,-100,0,0,0,0,1,1,1,1]],[14,3]],0,[0,2,1,0,0,1,0,7,4,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,-1,4,0,0,3,0,4,1,10],[0],[-1],[0]],[[[3,"card"],[96,"card",232.05,[-6,-7],[[119,5,277.5,277.5,-2],[7,1,0,-3,[3],4],[149,1.1,1,-5,[4,4282532418],[4,4293622342],[4,4288187746],-4]],[4,-1],[4,4282532418],[5,300,525],[190,540,0,0,0,0,1,1,1,0]],[1,"ID",1,[[131,45,1,1,"",-8,[2]],[23,9,14,14,-9]],[0,"dbdlj96YVMQpnjOvTgWOx1",1],[5,0,56.7],[-136,234.325,0,0,0,0,1,0.5,0.5,1]],[1,"Name",1,[[132,80,90,false,1,1,"",-10,[0],1]],[0,"4fx4WWH/hEYINGSYdwKLEV",1],[5,0,113.4],[0,0,0,0,0,0,1,0.5,0.5,1]]],0,[0,2,1,0,0,1,0,0,1,0,6,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,0,2,0,0,3,0,4,1,10],[0,0,0,0,0],[-1,5,-1,-1,1],[0,7,0,0,2]],[[[73,"KaTeX_Typewriter-Regular","KaTeX_Typewriter-Regular.ttf"],-1],0,0,[],[],[]],[[{"name":"cocos","rect":[18,0,83,120],"offset":[-0.5,0],"originalSize":[120,120],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[88]],[[{"name":"lv0002","rect":[0,0,782,551],"offset":[0,0],"originalSize":[782,551],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[89]],[[{"name":"default_radio_button_off","rect":[3,3,26,26],"offset":[0,0],"originalSize":[32,32],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[90]],[[{"name":"default_btn_pressed","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[3],[91]],[[[74,"SSTV",".wav",36.914512],-1],0,0,[],[],[]],[[[3,"Panel"],[97,"Panel",false,253,[-7,-8,-9,-10],[[37,-2],[180,-6,-5,-4,-3]],[4,-1],[4,4279833877],[5,900,500],[0,0,0,0,0,0,1,1,1,0]],[98,"splash",1,[-13,-14],[[7,1,0,-11,[7],8],[59,41,100,-12]],[0,"41m25bUHFPvoPxNjGtfaZs",1],[4,4279568906],[5,900,80],[0,210,0,0,0,0,1,1,1,1]],[16,"close-box",2,[[6,-15,[5],6],[60,32,20,14,-16],[36,3,-18,[[10,"04c8f0I/qBK0KqSujxwGoZc","closePanel",1]],-17]],[0,"03EaXGR6JBU7QXFFRCzg5O",1],[4,4285690623],[5,36,36],[412,0,0,0,0,0,1,1,1,0]],[28,"shadow",99.45,1,[[11,0,-19,[0],1],[13,45,-100,-100,-50,-50,1000,1000,-20]],[0,"a4NiaHe6ZKN6vAiA+S5HL3",1],[5,1100,600]],[29,"bg",1,[[7,1,0,-21,[2],3],[2,45,-22]],[0,"06o3B28CRKJK65GNODXwDv",1],[4,4279833877],[5,900,500]],[1,"Title",2,[[12,"文件查看器",42,50,1,1,"",-23,[4]],[23,18,350,232,-24]],[0,"3apuDI4eBOPZmr/86VBZzU",1],[5,210,63],[0,0,0,0,0,0,1,0.7,0.7,1]],[17,"Label",1,[[[13,45,40,40,100,20,22.25,63,-25],-26],4,1],[0,"0fgQYE66ZMAL/CqnNgsikI",1],[5,2050,950],[0,-40,0,0,0,0,1,0.4,0.4,1]],[133,"12",80,80,false,1,7,[9]]],0,[0,2,1,0,0,1,0,19,2,0,13,8,0,20,1,0,0,1,0,-1,4,0,-2,5,0,-3,2,0,-4,7,0,0,2,0,0,2,0,-1,6,0,-2,3,0,0,3,0,0,3,0,6,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,-2,8,0,4,1,26],[0,0,0,0,0,0,0,0,0,0,8],[-1,1,-1,1,-1,-1,1,-1,1,-1,5],[0,4,0,2,0,0,14,0,2,0,7]],[[{"name":"lv0001","rect":[0,0,782,551],"offset":[0,0],"originalSize":[782,551],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[92]],[[{"name":"default_btn_normal","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[3],[93]],[[[3,"SignIn"],[5,"SignIn",[-3,-4],[[2,45,-2]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[21,"Layout",1,[-6,-7,-8],[[24,1,1,10,-5,[5,1259.64,150]]],[0,"6eZPn9ixhJ0LYNtLFX2euk",1],[5,1259.64,150]],[1,"Label",1,[[12,"Flag 在这里，可你就是复制不了，怎么办呢？",50,80,1,1,"",-9,[0]]],[0,"a8krTtHa5OKpsyuDFPv/FZ",1],[5,1011.16,100.8],[0,200,0,0,0,0,1,1,1,1]],[1,"Label",2,[[12,"flag{",50,80,1,1,"",-10,[1]]],[0,"d9bVTVg05F8Ys79I8Fe6W7",1],[5,97.31,100.8],[-581.1650000000001,0,0,0,0,0,1,1,1,1]],[16,"FlagLabel",2,[[8,"ThisIsSoCoding1024PuzzleGameSignInFlag",90,90,false,1,1,"",-11,[2],3]],[0,"8dvIgbqK5LmJAIVhXY3Ij/",1],[4,4294950144],[5,1125.63,113.4],[40.30499999999995,0,0,0,0,0,1,1,1,1]],[1,"Label",2,[[12,"}",50,80,1,1,"",-12,[4]]],[0,"e7tVWSSzdLHrTAcoa5b+io",1],[5,16.7,100.8],[621.47,0,0,0,0,0,1,1,1,1]]],0,[0,2,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,-1,4,0,-2,5,0,-3,6,0,0,3,0,0,4,0,0,5,0,0,6,0,4,1,12],[0,0,0,0,0],[-1,-1,-1,5,-1],[0,0,0,1,0]],[[[3,"MainNone"],[5,"MainNone",[-5],[[2,45,-2],[181,-4,-3,0]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[17,"Dom",1,[[[120,960,960,590,490,-6],-7],4,1],[0,"4ebiVeujNFapKugZNa/COh",1],[5,500,500],[0,-50,0,0,0,0,1,1,1,1]],[14,2]],0,[0,2,1,0,0,1,0,7,3,0,0,1,0,-1,2,0,0,2,0,-2,3,0,4,1,7],[0],[16],[94]],[[[3,"SSTV"],[5,"SSTV",[-5],[[2,45,-2],[182,-4,-3,0]],[4,-1],[5,1920,1080],[960,540,0,0,0,0,1,1,1,1]],[107,"Dom",1,[[-6,[2,42,-7]],1,4],[0,"38Aj2FVadMh5NC2+06ypSS",1],[5,1920,0]],[14,2]],0,[0,2,1,0,0,1,0,7,3,0,0,1,0,-1,2,0,-1,3,0,0,2,0,4,1,7],[0],[44],[95]]]]